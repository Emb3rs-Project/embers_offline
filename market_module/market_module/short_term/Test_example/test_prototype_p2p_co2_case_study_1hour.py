"""
test function that makes input datastructures, then applies market functions
for p2p market with CO2 preferences, and block offers,
and with all other settings to default.

"""

# import own modules
from ...short_term.market_functions.run_shortterm_market import run_shortterm_market


def test_p2p_co2():
    # TEST P2P co2#################################################################################
    # setup inputs --------------------------------------------
    print("running test_p2p_co2().............................................")
    # TEST P2P #######################################################################################
    input_dict = {#'sim_name': 'test_p2p_co2',
                  'md': 'p2p',  # other options are  'p2p' or 'community'
                  'nr_of_hours': 1,
                  'offer_type': 'simple',
                  'prod_diff': 'co2Emissions',
                  'network': 'none',
                  'el_dependent': 'false',  # can be false or true
                  'el_price': 'none',
                  'agent_ids': ["Grid", "Supermarket", "Data Center", "Heat Pump", 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21', 'C22', 'C23', 'C24', 'C25', 'C26', 'C27', 'C28', 'C29', 'C30', 'C31'],
                  'agent_types': ["prosumer", "prosumer", "consumer", "producer"],
                  'objective': 'none',  # objective for community
                  'community_settings': {'g_peak': 'none', 'g_exp': 'none', 'g_imp': 'none'},
                  'gmin': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
                  'gmax': [[1000000.0, 16.217260898949874, 70.36087991625408, 1.756140528080687, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                  'lmin': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
                  'lmax': [[0.0, 0.0, 0.0, 0.0, 2.583509988355429, 1.0329459292977128, 0.27628728724792573, 0.9874126437761469, 3.7466318137151213, 1.9924677276466536, 0.8627789837741315, 1.2646599385996407, 0.7785122650691316, 0.6985372217301001, 1.6933251227019888, 0.2478355325662316, 0.8305798339510555, 0.6839149410813614, 1.7276266729443712, 2.0551089019089996, 2.24415333444743, 1.215727598939276, 0.7489803670557005, 0.12575198561477086, 0.24366321315542483, 0.8644859019411424, 1.3141080232880646, 1.3336211820266266, 1.4080400521649175, 1.4006816186624373, 0.05540880387473912, 3.2362416582878013, 0.6784193192376866, 2.325285425528746, 2.3480099786961834]],
                  'cost': [[0.33170193791315444, 0.16417622210000002, 0.20393040075495836, 0.38343963445108165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                  'util': [[0.0, 0.5091190401777294, 0.0, 0.0, 0.5057241970920099, 0.49231414723064826, 0.48037170266412044, 0.45644033475345014, 0.5405233752175526, 0.5077874549883759, 0.5546853623735475, 0.46689110974125375, 0.5314335567531505, 0.4993880006336292, 0.5655224601544058, 0.505098112614651, 0.6375066852867382, 0.6046949616467407, 0.54254426781296, 0.4580598296326051, 0.5028472025677563, 0.4433205132063665, 0.4559285483106108, 0.6263462668958077, 0.5386864658138594, 0.5288121007421958, 0.5439454817612103, 0.508993965566281, 0.5244587729734179, 0.42289617968259524, 0.5871272134037964, 0.473147049372098, 0.5435931022097744, 0.4980143274161739, 0.5457879889111855]],
                  'co2_emissions': [225, 225, 166.1, 34.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  'is_in_community': 'none',  # allowed values are 'none' or boolean array of size (nr_of_agents)
                  'block_offer': {'prosumer_1': [[0, 1]], 'producer_1': [[3, 4, 5, 6], [10, 11]]},
                  'is_chp': 'none',  # allowed values are 'none' or a list with ids of agents that are CHPs
                  'chp_pars': 'none',
                   'gis_data':
                      {'from_to': ['(0, 1)', '(1, 2)', '(1, 3)'],
                       'losses_total': [22969.228855, 24122.603833, 18138.588662],
                       'length': [1855.232413, 1989.471069, 1446.688900],
                       'total_costs': [1.848387e+06, 1.934302e+06, 1.488082e+06]},
                  'nodes' : "none",
                  'edges' : "none"
                  }

    result_dict = run_shortterm_market(input_dict=input_dict)

    # MAIN RESULTS

    # Shadow price per hour
    print(result_dict['shadow_price'])

    # Energy dispatch
    print(result_dict['Pn'])
    print(result_dict['Gn'])
    print(result_dict['Ln'])
    print(result_dict['Tnm'])


    # Settlement
    print(result_dict['settlement'])

    # Social welfare
    print(result_dict['social_welfare_h'])

    # Quality of Experience (QoE)
    print(result_dict['QoE'])

    print("finished test_p2p_co2().............................................")